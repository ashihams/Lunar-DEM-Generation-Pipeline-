# -*- coding: utf-8 -*-
"""preprocessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AaoEuDVaZhZz-GtPvVuI37DKAe46dA0N
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import matplotlib.pyplot as plt

filename = '/content/drive/MyDrive/preview/ch2_tmc_ncn_20200722T0439298494_d_img_d32.img'

lines = 234333
samples = 4000
dtype = np.uint16  # UnsignedLSB2 ≈ unsigned 16-bit little-endian

# Open the file and read only a subset (e.g., first 1000 lines)
num_preview_lines = 10000

with open(filename, 'rb') as f:
    data = np.fromfile(f, dtype='<u2', count=num_preview_lines * samples)
    # '<u2': little-endian unsigned short (16-bit)

# Reshape to 2D
image_preview = data.reshape((num_preview_lines, samples))

# Plot
plt.figure(figsize=(12, 6))
plt.imshow(image_preview, cmap='gray')
plt.title("Preview: First 1000 lines")
plt.xlabel("Samples")
plt.ylabel("Lines")
plt.colorbar(label='Pixel Value')
plt.show()

import numpy as np
import cv2
import matplotlib.pyplot as plt

# === Parameters from your XML metadata ===
img_shape = (234333, 4000)
sun_elevation = 64.821874  # degrees
sun_azimuth = 318.770477   # degrees
pixel_resolution = 4.84    # m/pixel

# === Step 1: Load TMC image from raw binary ===
img_file = '/content/drive/MyDrive/preview/ch2_tmc_ncn_20200722T0439298494_d_img_d32.img'

# Process only top N lines for preview to save memory
N = 4000  # adjust as needed
with open(img_file, 'rb') as f:
    img = np.fromfile(f, dtype='<u2', count=N*img_shape[1]).reshape((N, img_shape[1]))

print("✅ Image loaded:", img.shape)

# === Step 2: Noise reduction ===
# Robust min-max to avoid outliers
img_min, img_max = np.percentile(img, [2, 98])
img8 = ((np.clip(img, img_min, img_max) - img_min) / (img_max - img_min) * 255).astype(np.uint8)

# fastNlMeansDenoising
denoised8 = cv2.fastNlMeansDenoising(img8, None, h=10, templateWindowSize=7, searchWindowSize=21)

# Back to float32 scaled
denoised = denoised8.astype(np.float32) / 255.0 * (img_max - img_min) + img_min

print("✅ Noise reduction done")

# === Step 3: Illumination correction ===
incidence_angle = 90 - sun_elevation   # ≈25.18°
incidence_rad = np.deg2rad(incidence_angle)
cos_i = np.cos(incidence_rad)

illum_corrected = denoised / cos_i
illum_corrected = np.clip(illum_corrected, 0, np.percentile(illum_corrected, 99))

print("✅ Illumination correction done")

# === Step 4: Contrast enhancement (CLAHE) ===
ic_min, ic_max = np.percentile(illum_corrected, [2, 98])
illum8 = ((np.clip(illum_corrected, ic_min, ic_max) - ic_min) / (ic_max - ic_min) * 255).astype(np.uint8)

clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8,8))
enhanced8 = clahe.apply(illum8)

enhanced = enhanced8.astype(np.float32) / 255.0

print("✅ Contrast enhancement done")

# === Step 5: Quick preview ===
preview = enhanced[:10000, :]  # first 4000 lines

plt.figure(figsize=(12,6))
plt.imshow(preview, cmap='gray')
plt.title('Preview: Preprocessed image (top 4000 lines)')
plt.colorbar()
plt.show()

# === Step 6: Save thumbnail for DEM or shape-from-shading later ===
thumbnail = cv2.resize(enhanced, (4000, 200), interpolation=cv2.INTER_AREA)
plt.imsave('/content/preprocessed_thumbnail.png', thumbnail, cmap='gray')

print("✅ Saved: /content/preprocessed_thumbnail.png")
